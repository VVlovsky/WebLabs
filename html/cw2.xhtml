<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="pl" lang="pl">
<head>
    <title>Ćwiczenie 2</title>
</head>
<body>
<div>
    <b>Linki do innych ćwiczeń</b>
    <ul>
        <li><a href="./cw1.xhtml">cw1.xhtml</a></li>
        <li><a href="./cw2.xhtml">cw2.xhtml</a></li>
        <li><a href="./cw3.xhtml">cw3.xhtml</a></li>
        <li><a href="./cw4.xhtml">cw4.xhtml</a></li>
    </ul>
    <b>Treść</b>
    <ul>
        <li><a href="#code">Code</a></li>
        <li><a href="#samp">Samp</a></li>
    </ul>
</div>
<div>
    <h1 align="center">Ćwiczenie 2</h1>
    <h2 align="left">Tekst</h2>
    <i>Ogólnie znana teza głosi,</i> iż <em>użytkownika może rozpraszać zrozumiała zawartość strony</em>, kiedy ten chce
    <b> zobaczyć sam jej wygląd. </b> Jedną z <strong> mocnych stron używania Lorem Ipsum jest to,</strong> że ma wiele
    różnych „kombinacji” zdań, słów i akapitów, w przeciwieństwie do zwykłego: „tekst, tekst, tekst”, sprawiającego, że
    wygląda to „zbyt czytelnie” po polsku.
    <h2 id="code" align="left">Code</h2>
    <code>
        #include &lt;iostream&gt;<br/>
        #include &lt;cstdlib&gt;<br/>
        <br/>
        using namespace std;<br/>
        <br/>
        int main()<br/>
        {<br/>
        int s;<br/>
        long long silnia = 1;<br/>
        <br/>
        cout &lt;&lt; "podaj liczbe" &gt;&gt; endl;<br/>
        cin >> s;<br/>
        <br/>
        for (int i = 1; i&lt;=s;i++)<br/>
        silnia *= i;<br/>
        <br/>
        cout &lt;&lt; silnia &lt;&lt; endl;<br/>
        <br/>
        system("PAUSE");<br/>
        return(0);<br/>
        }<br/>
    </code>
    <h2 id="samp" align="left">Samp</h2>
    <samp>
        #include &lt;iostream&gt;<br/>
        #include &lt;cstdlib&gt;<br/>
        <br/>
        using namespace std;<br/>
        <br/>
        int main()<br/>
        {<br/>
        int s;<br/>
        long long silnia = 1;<br/>
        <br/>
        cout &lt;&lt; "podaj liczbe" &gt;&gt; endl;<br/>
        cin >> s;<br/>
        <br/>
        for (int i = 1; i&lt;=s;i++)<br/>
        silnia *= i;<br/>
        <br/>
        cout &lt;&lt; silnia &lt;&lt; endl;<br/>
        <br/>
        system("PAUSE");<br/>
        return(0);<br/>
        }<br/>
    </samp>
    <h2 align="left">Wzór</h2>
    L<sub>cir</sub> &gt; x * y<sup>2t</sup>
    <h2 align="left">Pytania</h2>
    Q: Jaka jest różnica między znacznikami i oraz em? Czy zawsze dają identyczne wyniki? <br/>
    A: em służy dodatkowo do uwypuklania danej informacji (ang. emphasize) oraz może dawać inny wynik w zależności od
    stylu.<br/>
    Q: Jaka jest różnica między znacznikami b oraz strong? Czy zawsze dają identyczne wyniki?<br/>
    A: strong niesie ze sobą dodatkową informację o znaczeniu danej treści oraz może dawać inny wynik w zależności od
    stylu.<br/>
    Q: Jaka jest różnica między znacznikami code oraz samp? Czy zawsze dają identyczne wyniki?<br/>
    A: Znacznik code stosujemy do kodu źródłowego, natomiast samp do wyjścia programu.<br/>
    Q: Jaka jest różnica pomiędzy fragmentem strony sformatowanej tak: &lt;p>…&lt;/p>&lt;p>…&lt;/p> oraz fragmentem o
    następującej postaci: &lt;p>…&lt;br/>&lt;br/>…&lt;/p>?<br/>
    A: Pierwszy fragment to dwa osobne paragrafy, natomiast drugi to jeden paragraf zajmujący dwie linijki. Wyglądają
    tak
    samo.<br/>

    <p>
        <a href="http://validator.w3.org/check?uri=referer"><img
                src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Transitional" height="31" width="88"/></a>
    </p>
</div>
</body>
</html>